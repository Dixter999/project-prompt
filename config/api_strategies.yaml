# API Strategies for Sistema de Implementaci√≥n Adaptativa
# Configuration for optimizing API requests based on task type and complexity

# Temperature settings by task type
temperature_by_task:
  creative: 0.8
  implementation: 0.3
  analysis: 0.1
  debugging: 0.05
  refactoring: 0.2
  testing: 0.3
  optimization: 0.2
  exploration: 0.6

# Max tokens based on complexity level
max_tokens_by_complexity:
  simple: 2000
  medium: 4000
  complex: 8000
  very_complex: 12000
  enterprise: 16000

# System prompts for different task types
system_prompts:
  implementation: |
    You are a senior software engineer focused on writing clean, maintainable, and well-documented code. 
    Always follow best practices and explain your decisions. Prioritize code quality and long-term maintainability.
    
  analysis: |
    You are an expert code reviewer with deep knowledge of software architecture patterns. 
    Provide thorough, actionable feedback with specific examples and improvement suggestions.
    
  optimization: |
    You are a performance engineering specialist. Focus on measurable improvements while maintaining 
    code readability. Always explain the performance impact of suggested changes.
    
  debugging: |
    You are a debugging specialist with expertise in systematic problem-solving. Use a methodical 
    approach to identify root causes and provide clear, step-by-step solutions.
    
  refactoring: |
    You are a code refactoring expert focused on improving code structure without changing behavior. 
    Prioritize maintainability, readability, and adherence to SOLID principles.
    
  testing: |
    You are a test engineering specialist who understands the importance of comprehensive test coverage. 
    Write clear, maintainable tests that effectively verify functionality.

# Model selection strategies
model_selection:
  high_precision:
    model: "claude-3-opus-20240229"
    use_cases: ["debugging", "critical_implementation", "architecture_review"]
    
  balanced:
    model: "claude-3-sonnet-20240229"
    use_cases: ["implementation", "analysis", "refactoring", "testing"]
    
  fast_iteration:
    model: "claude-3-haiku-20240307"
    use_cases: ["simple_tasks", "quick_analysis", "code_formatting"]

# Context optimization strategies
context_optimization:
  file_size_limits:
    small: 1000    # lines
    medium: 5000   # lines
    large: 15000   # lines
    
  context_prioritization:
    high_priority: ["main_files", "interfaces", "configurations"]
    medium_priority: ["test_files", "utilities", "documentation"]
    low_priority: ["generated_files", "cache_files", "logs"]
    
  truncation_strategy:
    preserve_structure: true
    keep_imports: true
    keep_function_signatures: true
    summarize_implementations: true

# Request optimization
request_optimization:
  batch_processing:
    enabled: true
    max_batch_size: 5
    batch_delay: 1.0  # seconds
    
  retry_strategy:
    max_retries: 3
    backoff_factor: 2.0
    retry_on: ["rate_limit", "timeout", "server_error"]
    
  caching:
    enabled: true
    cache_duration: 3600  # seconds
    cache_key_factors: ["prompt_hash", "context_hash", "model", "temperature"]

# Cost optimization
cost_optimization:
  budget_limits:
    daily: 50.0    # USD
    monthly: 500.0 # USD
    
  cost_aware_model_selection:
    enabled: true
    fallback_model: "claude-3-haiku-20240307"
    cost_threshold: 10.0  # USD per request
    
  optimization_techniques:
    - "prompt_compression"
    - "context_summarization"
    - "smart_batching"
    - "cache_utilization"

# Quality assurance
quality_assurance:
  response_validation:
    enabled: true
    check_code_syntax: true
    verify_completeness: true
    flag_hallucinations: true
    
  confidence_scoring:
    enabled: true
    factors: ["response_length", "code_quality", "explanation_clarity"]
    minimum_confidence: 0.7
    
  feedback_integration:
    enabled: true
    success_tracking: true
    failure_analysis: true
    continuous_improvement: true
