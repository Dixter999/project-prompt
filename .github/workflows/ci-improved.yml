name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  workflow_dispatch: # Add manual trigger support

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']  # Simplified to just test on one Python version

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov keyring tiktoken
        # Install the package in development mode
        pip install -e .
        
    - name: Create CI mock keyring
      run: |
        # Create a mock keyring utility that can be imported in all tests
        cat > tests/ci_mock_keyring.py << 'EOL'
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Mock keyring implementation for CI environment.

This module replaces the real keyring with a memory-based implementation
that works in CI environments without a real backend.
"""

import sys
import types

# Create a mock keyring module to avoid backend issues
mock_keyring = types.ModuleType('keyring')

# Add mock functions
class MemoryKeyring:
    def __init__(self):
        self.store = {}
        
    def get_password(self, service_name, username):
        key = f"{service_name}:{username}"
        return self.store.get(key)
        
    def set_password(self, service_name, username, password):
        key = f"{service_name}:{username}"
        self.store[key] = password
        
    def delete_password(self, service_name, username):
        key = f"{service_name}:{username}"
        if key in self.store:
            del self.store[key]
            return True
        return False

_keyring = MemoryKeyring()
mock_keyring.get_password = _keyring.get_password
mock_keyring.set_password = _keyring.set_password
mock_keyring.delete_password = _keyring.delete_password

# Replace the real keyring with our mock
sys.modules['keyring'] = mock_keyring
print("✅ Keyring module patched for CI tests")
EOL
        
    - name: Verify imports
      run: |
        # First import the mock keyring for CI
        python -c "import tests.ci_mock_keyring; print('Mock keyring loaded successfully')"
        
        # Create an import test file that catches circular imports
        cat > import_test.py << 'EOL'
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Test script to verify that all key modules can be imported without circular import issues.
This script is used by the CI workflow to ensure basic functionality works.
"""

import sys
import os

# Add the project root to the Python path
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

# First import our mock keyring
import tests.ci_mock_keyring

def test_imports():
    """Test that all key modules can be imported without circular dependencies."""
    print("Testing core module imports...")
    
    # Test basic module imports
    import src
    print(f"✅ src module imported, version: {src.__version__}")
    
    # Test core utilities
    from src.utils.config import ConfigManager
    print("✅ ConfigManager imported")
    
    # Test other key modules
    try:
        from src.utils.documentation_system import get_documentation_system
        print("✅ DocumentationSystem factory function imported")
        
        from src.generators.markdown_generator import get_markdown_generator
        print("✅ MarkdownGenerator factory function imported")
        
        # Create an instance to verify no circular imports
        config_manager = ConfigManager()
        print("✅ ConfigManager instantiated")
        
        # This line would cause a circular import if not fixed properly
        markdown_generator = get_markdown_generator()
        print("✅ MarkdownGenerator instantiated")
        
        print("\n✅ All imports successful!")
        return 0
    except ImportError as e:
        print(f"\n❌ Import failed: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(test_imports())
EOL
        
        # Run the import test
        python import_test.py
        
    - name: Run tests
      run: |
        # Set PYTHONPATH to include the project root
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        
        # Import the mock keyring then run tests
        python -c "import tests.ci_mock_keyring; import pytest; pytest.main(['-v', 'tests/test_config.py', 'tests/test_utils/test_config.py'])"
        
    - name: Report success
      run: echo "CI tests passed successfully!"
