name: Manual Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  build-python-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build packages
        run: |
          python -m build
          
      - name: Upload Python packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  build-vscode-extension:
    name: Build VS Code Extension
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd vscode-extension
          npm install
          npm install -g @vscode/vsce
          
      - name: Build extension
        run: |
          cd vscode-extension
          vsce package --no-dependencies
          
      - name: Upload VS Code extension
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: vscode-extension/*.vsix

  create-release:
    name: Create GitHub Release
    needs: [build-python-package, build-vscode-extension]
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Create Git Tag
        run: |
          git tag -f ${{ github.event.inputs.version }}
          git push -f origin ${{ github.event.inputs.version }}
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ProjectPrompt ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/python-package/*.tar.gz
            artifacts/python-package/*.whl
            artifacts/vscode-extension/*.vsix
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install publishing tools
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          find artifacts/python-package -name "*.tar.gz" -o -name "*.whl" | xargs twine upload
          
      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          npm install -g @vscode/vsce
          
          # Find and publish each VSIX file directly
          for file in artifacts/vscode-extension/*.vsix; do
            if [ -f "$file" ]; then
              echo "Publishing $file"
              vsce publish --packagePath "$file" -p $VSCE_PAT
            else
              echo "No VSIX files found in artifacts/vscode-extension/"
              exit 1
            fi
          done
