name: Release Pipeline

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest tests/ -k "not integration and not anthropic"

  build-python-package:
    name: Build Python Package
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry build twine
          
      - name: Build package
        run: |
          poetry build
          
      - name: Run twine check
        run: |
          twine check dist/*
          
      - name: Upload Python package artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          
  build-executables:
    name: Build Executables
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Build executable
        run: |
          python scripts/build.py --exe-only
          
      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/project-prompt-*

  build-vscode-extension:
    name: Build VS Code Extension
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: |
          npm install -g vsce
          cd vscode-extension && npm install
          
      - name: Build extension
        run: |
          cd vscode-extension && vsce package
          
      - name: Upload VS Code extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: vscode-extension/*.vsix

  publish:
    name: Publish Release
    needs: [build-python-package, build-executables, build-vscode-extension]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Extract version
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: ProjectPrompt ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/python-package/*
            artifacts/executable-*/*
            artifacts/vscode-extension/*.vsix
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install publishing tools
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload artifacts/python-package/*
          
      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          npm install -g vsce
          vsce publish -p $VSCE_PAT -i artifacts/vscode-extension/*.vsix
